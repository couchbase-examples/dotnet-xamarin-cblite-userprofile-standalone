# docs taken from: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-xamarin-applications
name: Builds
on:
  workflow_dispatch:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    # see what's supported here -  https://github.com/actions/virtual-environments/blob/main/images/macos/macos-10.15-Readme.md
    - name: Set default Xamarin SDK versions
      run: |
        $VM_ASSETS/select-xamarin-sdk-v2.sh --mono=6.12 --ios=14.14 --android=11.2
   # must manually select XCode version - docs doesn't show this version but looking at issue #4769 it says it's supported.
   # https://github.com/actions/virtual-environments/issues/4769
    - name: Set default Xcode 13.2.1
      run: |
        XCODE_ROOT=/Applications/Xcode_13.2.1.app
        echo "MD_APPLE_SDK_ROOT=$XCODE_ROOT" >> $GITHUB_ENV
        sudo xcode-select -s $XCODE_ROOT
    - name: Setup .NET Core SDK 5.0.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'
# msbuild requires the keystore be in a file instead of base64, so we need to create a keystore file with the results we have saved in the secretes
    - name: Setup Android signing 
      run: |
        (echo ${{secrets.SIGNING_KEY_BASE64}} | base64 ) > src/UserProfileDemo.Android/keystore.jks
# AppCenter requires a new build number when we build to upload to app center so we know which build works and fails, this updates the build number
    - name: Update iOS Version 
      run: |
        /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${{ 1.0 }}" ./src/UserProfileDemo.iOS/Info.plist
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${{ github.run_number }}" ./src/UserProfileDemo.iOS/Info.plist
# AppCenter requires a new build number when we build to upload to app center so we know which build works and fails, this updates the build number
    - name: Set Android version
      uses: damienaicheh/update-android-version-manifest-action@v1.0.0
      with:
          android-manifest-path: src/UserProfileDemo.Android/Properties/AndroidManifest.xml
          version-name: 1.0
          version-code: ${{ github.run_number }}
# installs dependencies for older versions of .NET before standard/core
    - name: Install dependencies for Mono Projects
      run: |
        nuget restore src/UserProfileDemo.sln
# have to restore dotnet core projects seperately using dotnet command line
    - name: Install dependencies for Core Project 
      run: |
        dotnet restore src/UserProfileDemo.Core/UserProfileDemo.Core.csproj
    - name: Install dependencies for Xamarin Forms Project 
      run: |
        dotnet restore src/UserProfileDemo/UserProfileDemo.csproj
    - name: Install dependencies for Repositories 
      run: |
        dotnet restore src/UserProfileDemo.Repositories/UserProfileDemo.Repositories.csproj
# can't build from solution due to UWP - build each standard project seperately then build iOS and then Android
    - name: Build Models 
      run: |
        dotnet build src/UserProfileDemo.Models/UserProfileDemo.Models.csproj --configuration Debug --verbosity diag --no-incremental 
    - name: Build Core 
      run: |
        dotnet build src/UserProfileDemo.Core/UserProfileDemo.Core.csproj --configuration Debug --verbosity diag 
    - name: Build Repositories 
      run: |
        dotnet build src/UserProfileDemo.Repositories/UserProfileDemo.Repositories.csproj --configuration Debug --verbosity diag 
    - name: Build Xamarin Forms 
      run: |
        dotnet build src/UserProfileDemo/UserProfileDemo.csproj --configuration Debug --verbosity diag 
    - name: Build iOS
      run: |
        msbuild src/UserProfileDemo.iOS/UserProfileDemo.iOS.csproj /p:Configuration=Debug /p:Platform=iPhone /t:Rebuild -verbosity:diag /p:BuildIpa=true 
    - name: Build Android
      run: |
        msbuild src/UserProfileDemo.Android/UserProfileDemo.Android.csproj /t:PackageForAndroid /t:SignAndroidPackage /p:Configuration=Debug /p:AndroidPackageFormat=apk -verbosity:diag /p:AndroidKeyStore=true  /p:AndroidSigningKeyAlias=${{secrets.KEYSTORE_ALIAS}} /p:AndroidSigningKeyPass=${{secrets.KEY_PASSWORD}} /p:AndroidSigningStorePass=${{secrets.KEYSTORE_PASSWORD}}     -verbosity:diag /p:AndroidSigningKeyStore=keystore.jks -verbosity:diag
    - name: Upload artifact to App Center for Testing Android
      run: | 
          appcenter distribute release --token "${{secrets.APPCENTER_API_KEY_ANDROID}}" --app "Couchbase-Inc./UserProfile-Standalone-Xamarin-Android" --group "Collaborators" --file src/UserProfileDemo.Android/bin/Debug/com.couchbase.userprofiledemo-Signed.apk --silent --debug --release-notes "${{ github.event.head_commit.message }}"    
    - name: Upload artifact to App Center for Testing iOS 
      run: | 
          appcenter distribute release --token "${{secrets.APPCENTER_API_KEY_iOS}}" --app "Couchbase-Inc./UserProfile-Standalone-Xamarin-iOS" --group "Collaborators" --file src/UserProfileDemo.iOS/bin/iPhone/Debug/UserProfileDemo.iOS.ipa --silent --debug --release-notes "${{ github.event.head_commit.message }}"    
    - name: Run UI Tests in App Center iOS
      run: | 
        appcenter test run uitest --token "${{secrets.APPCENTER_API_KEY_iOS}}" --app "Couchbase-Inc./UserProfile-Standalone-Xamarin-iOS" --devices "Couchbase-Inc./iOSdevices" --app-path ./src/UserProfileDemo.iOS/bin/iPhone/Debug/UserProfileDemo.iOS.ipa --test-series "Tests" --locale "en_US" --build-dir ./src/UserProfileDemo.UITests
    - name: Run UI Tests in App Center Android
      run: | 
        appcenter test run uitest --token "${{secrets.APPCENTER_API_KEY_ANDROID}}" --app "Couchbase-Inc./UserProfile-Standalone-Xamarin-Android" --devices "Couchbase-Inc./devices" --app-path ./src/UserProfileDemo.Android/bin/Debug/com.couchbase.userprofiledemo-Signed.apk --test-series "Tests" --locale "en_US" --build-dir ./src/UserProfileDemo.UITests
