# docs taken from: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-xamarin-applications
name: Builds
on:
  workflow_dispatch:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: macos-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v2

# stupid GitHub runners don't have the latest version of Xamarin iOS on them and we are hitting a forms bug -  going to have to use boots to install mono and Xamarin - see: https://github.com/jonathanpeppers/boots
    - name: install boots and Xamarin
      shell: bash
      run: |
        export PATH="$PATH:~/.dotnet/tools"
        dotnet tool install --global boots
        boots --stable Mono
        boots --stable Xamarin.Android 
        boots --stable Xamarin.iOS 

   # must manually select XCode version - docs doesn't show this version but looking at issue #4769 it says it's supported.
   # https://github.com/actions/virtual-environments/issues/4769

    - name: Set default Xcode 13.2.1
      run: |
        XCODE_ROOT=/Applications/Xcode_13.2.1.app
        echo "MD_APPLE_SDK_ROOT=$XCODE_ROOT" >> $GITHUB_ENV
        sudo xcode-select -s $XCODE_ROOT

    - name: Setup .NET Core SDK 5.0.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'

# msbuild requires the keystore be in a file instead of base64, so we need to create a keystore file with the results we have saved in the secretes
    - name: Setup Android signing 
      run: |
        (echo ${{secrets.SIGNING_KEY_BASE64}} | base64 ) > src/UserProfileDemo.Android/keystore.jks
        
# iOS Signing Certs required becauase we want to test these on physical devices, the build has to be signed with a developer certifcate and profile - please read this before continuing:  https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development

    - name: Install the Apple certificate and provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_SIGNING_CERTS }}
        P12_PASSWORD: ${{ secrets.IOS_SIGNING_CERTS_PASSWORD }} 
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE }}
        KEYCHAIN_PASSWORD: ${{ secrets.IOS_SIGNING_CERTS_PASSWORD }} 
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles
# AppCenter requires a new build number when we build to upload to app center so we know which build works and fails, this updates the build number
    - name: Update iOS Version 
      run: |
        /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${{ 1.0 }}" ./src/UserProfileDemo.iOS/Info.plist
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${{ github.run_number }}" ./src/UserProfileDemo.iOS/Info.plist

# AppCenter requires a new build number when we build to upload to app center so we know which build works and fails, this updates the build number
    - name: Set Android version
      uses: damienaicheh/update-android-version-manifest-action@v1.0.0
      with:
          android-manifest-path: src/UserProfileDemo.Android/Properties/AndroidManifest.xml
          version-name: 1.0
          version-code: ${{ github.run_number }}

# installs dependencies for older versions of .NET before standard/core
    - name: Install dependencies for Mono Projects
      run: |
        nuget restore src/UserProfileDemoTests.sln

# have to restore dotnet core projects seperately using dotnet command line
    - name: Install dependencies for Core Project 
      run: |
        dotnet restore src/UserProfileDemo.Core/UserProfileDemo.Core.csproj

    - name: Install dependencies for Xamarin Forms Project 
      run: |
        dotnet restore src/UserProfileDemo/UserProfileDemo.csproj

    - name: Install dependencies for Repositories 
      run: |
        dotnet restore src/UserProfileDemo.Repositories/UserProfileDemo.Repositories.csproj

# can't build from solution due to UWP - build each standard project seperately then build iOS and then Android
    - name: Build Models 
      run: |
        dotnet build src/UserProfileDemo.Models/UserProfileDemo.Models.csproj --configuration Debug --verbosity diag --no-incremental 

    - name: Build Core 
      run: |
        dotnet build src/UserProfileDemo.Core/UserProfileDemo.Core.csproj --configuration Debug --verbosity diag 

    - name: Build Repositories 
      run: |
        dotnet build src/UserProfileDemo.Repositories/UserProfileDemo.Repositories.csproj --configuration Debug --verbosity diag 

    - name: Build Xamarin Forms 
      run: |
        dotnet build src/UserProfileDemo/UserProfileDemo.csproj --configuration Debug --verbosity diag 

    - name: Build iOS
      run: |
        msbuild src/UserProfileDemo.iOS/UserProfileDemo.iOS.csproj /p:Configuration=Debug /p:Platform=iPhone /t:Rebuild -verbosity:diag /p:BuildIpa=true 

    - name: Build Android
      run: |
        msbuild src/UserProfileDemo.Android/UserProfileDemo.Android.csproj /t:SignAndroidPackage /p:Configuration=Debug /p:AndroidPackageFormat=apk -verbosity:diag /p:AndroidSigningKeyAlias=${{secrets.KEYSTORE_ALIAS}} /p:AndroidSigningKeyPass=${{secrets.KEY_PASSWORD}} /p:AndroidSigningStorePass=${{secrets.KEYSTORE_PASSWORD}} /p:AndroidSigningKeyStore=src/UserProfileDemo.Android/keystore.jks

    - name: Build UI Tests 
      run: |
         msbuild src/UserProfileDemo.UITests/UserProfileDemo.UITests.csproj /p:Configuration=Debug -verbosity diag 

 # required to clean up certs and profiles in all cases
    - name: Clean up keystore, keychain, and provisioning profile
      if: ${{ always() }}
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
        rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
        rm src/UserProfileDemo.Android/keystore.jks

    - name: Upload artifact to App Center for Testing Android
      run: | 
          appcenter distribute release --token "${{secrets.APPCENTER_API_KEY_ANDROID}}" --app "Couchbase-Inc./UserProfile-Standalone-Xamarin-Android" --group "Collaborators" --file src/UserProfileDemo.Android/bin/Debug/com.couchbase.userprofiledemo-Signed.apk --silent --debug --release-notes "${{ github.event.head_commit.message }}"    

    - name: Upload artifact to App Center for Testing iOS 
      run: | 
          appcenter distribute release --token "${{secrets.APPCENTER_API_KEY_iOS}}" --app "Couchbase-Inc./UserProfile-Standalone-Xamarin-iOS" --group "Collaborators" --file src/UserProfileDemo.iOS/bin/iPhone/Debug/UserProfileDemo.iOS.ipa --silent --debug --release-notes "${{ github.event.head_commit.message }}"    

    - name: Run UI Tests in App Center iOS
      run: | 
        appcenter test run uitest --token "${{secrets.APPCENTER_API_KEY_iOS}}" --app "Couchbase-Inc./UserProfile-Standalone-Xamarin-iOS" --devices "Couchbase-Inc./iOSdevices" --app-path src/UserProfileDemo.iOS/bin/iPhone/Debug/UserProfileDemo.iOS.ipa --test-series "Tests" --locale "en_US" --build-dir src/UserProfileDemo.UITests --uitest-tools-dir src/UserProfileDemo.UITests/bin/Debug

    - name: Run UI Tests in App Center Android
      run: | 
        appcenter test run uitest --token "${{secrets.APPCENTER_API_KEY_ANDROID}}" --app "Couchbase-Inc./UserProfile-Standalone-Xamarin-Android" --devices "Couchbase-Inc./devices" --app-path src/UserProfileDemo.Android/bin/Debug/com.couchbase.userprofiledemo-Signed.apk --test-series "Tests" --locale "en_US" --build-dir src/UserProfileDemo.UITests --uitest-tools-dir src/UserProfileDemo.UITests/bin/Debug